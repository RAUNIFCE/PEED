#include <stdio.h>
#include <stdlib.h>
#include <locale.h>
#include <string.h>
typedef struct Livro {
    char isbn[14];       // Formato: 978-85-359-9999-9
    char titulo[100];
    char autor[50];
    int ano_publicacao;
    int disponivel;      // 1 para disponível, 0 para emprestado
} Livro;

typedef struct NoAVL {
    Livro *livro;
    struct NoAVL* esq;
    struct NoAVL* dir;
    int altura;
} NoAVL;
void exibir(NoAVL* raiz){
    if(!raiz)return;
    exibir(raiz->esq);

    exibir(raiz->dir);
    printf(" %s-> \n",raiz->livro->isbn);
}
int maior(int a,int b){
    return (a>b)? a:b;
}

int alturaNo(NoAVL *no){
    if(no == NULL){
        return 0;
    }else{
          return no->altura;
    }
}
int fbalanceamento(NoAVL *no){
    if(no){
        return(alturaNo(no->esq)- alturaNo(no->dir));
    }
    else{
        return 0;
    }
}
NoAVL* Re(NoAVL *a){ //a nó com fator de balanceamento maior que 1,b filho desse nó e c possível filho a esquerda de b
    NoAVL *b,*c;

    b=a->dir; //digo que b é filho direito de a
    c=b->esq; //digo que c é filho esquerdo de b

    b->esq=a; //esq de b vai ser a,ocorre o giro
    a->dir=c; // se b tivesse o filho a esqueda c  ele seria movido pra direita de a

    a->altura=maior(alturaNo(a->esq),alturaNo(a->dir))+1;
    b->altura=maior(alturaNo(b->esq),alturaNo(b->dir))+1;

    return b;
}
NoAVL* Rd(NoAVL *a){ //a nó com fator de balanceamento maior que 1,b filho desse nó e c possível filho a esquerda de b
    NoAVL *b,*c;

    b=a->esq; //digo que b é filho direito de a
    c=b->dir; //digo que c é filho esquerdo de b

    b->dir=a; //esq de b vai ser a,ocorre o giro
    a->esq=c; // se b tivesse o filho a esqueda c  ele seria movido pra direita de a

    a->altura=maior(alturaNo(a->esq),alturaNo(a->dir))+1;
    b->altura=maior(alturaNo(b->esq),alturaNo(b->dir))+1;

    return b;
}

NoAVL* inserirlivro(NoAVL* raiz,Livro *livro){
    if (raiz == NULL) {

        NoAVL* novoNo = (NoAVL*)malloc(sizeof(NoAVL));
        novoNo->livro = livro;
        novoNo->esq = NULL;
        novoNo->dir = NULL;
        novoNo->altura = 1;
        return novoNo;
        }
            if(strcmp(livro->isbn,raiz->livro->isbn)<0){ /*strcmp olha a diferença de caracteres de acordo com ASCII  */
                raiz->esq=inserirlivro(raiz->esq,livro);
            }
            else if (strcmp(livro->isbn, raiz->livro->isbn) > 0){
                raiz->dir = inserirlivro(raiz->dir, livro);
            }
            else{
                return raiz;
            }

        raiz->altura = 1 + maior(alturaNo(raiz->esq), alturaNo(raiz->dir));
        int fb=fbalanceamento(raiz);
            //caso LL
            if (fb > 1 && strcmp(livro->isbn, raiz->esq->livro->isbn) < 0){
            return Rd(raiz);
            }
            //caso RR
            if (fb < -1 && strcmp(livro->isbn, raiz->dir->livro->isbn) > 0){
                    return Re(raiz);
            }

            //caso LR
            if (fb > 1 && strcmp(livro->isbn, raiz->esq->livro->isbn) > 0) {
                raiz->esq = Re(raiz->esq);
                return Rd(raiz);
            }

            //caso RL
            if (fb < -1 && strcmp(livro->isbn, raiz->dir->livro->isbn) < 0) {
                raiz->dir = Rd(raiz->dir);
                return Re(raiz);
            }

        return raiz;
}

Livro* gerarLivro(char* isbn,char* titulo,char* autor,int ano_publicacao,int disponivel){
    Livro* novo=(Livro*)malloc(sizeof(Livro));
    if(!novo){
        printf("Erro ao criar Nó\n");
        exit(1);
    }

    strcpy(novo->isbn, isbn);
    strcpy(novo->titulo, titulo);
    strcpy(novo->autor, autor);
    novo->ano_publicacao=ano_publicacao;
    novo->disponivel=disponivel;
        printf("\nLivro inserido com sucesso!\n");
        printf("---------------------------------\n");
        printf(" ISBN:           %s\n", novo->isbn);
        printf(" Título:         %s\n", novo->titulo);
        printf(" Autor:          %s\n", novo->autor);
        printf(" Ano:            %d\n", novo->ano_publicacao);
        printf(" Disponível:     %s\n", novo->disponivel ? "Sim" : "Não");
        printf("---------------------------------\n");

    return novo;
}

int main() {
    setlocale(LC_ALL,"portuguese" );
    NoAVL *raiz=NULL;
    int opc;
    do{
        printf("Digite a opção desejada \n1-inserir livro\n2-Desfazer acao\n3-exibir\n4-somar tudo e finalizar \n");
        scanf("%d",&opc);
        getchar();
        if(opc==1){
            char isbn[14],titulo[100],autor[50];
            int ano,disponivel;
                printf("Digite a isbn do livro\n");
                fgets(isbn,14,stdin);
                isbn[strcspn(isbn, "\n")] = '\0';

                printf("Digite o titulo do livro\n");
                fgets(titulo,100,stdin);
                titulo[strcspn(titulo, "\n")] = '\0';

                printf("Digite o autor do livro\n");
                fgets(autor,50,stdin);
                autor[strcspn(autor, "\n")] = '\0';

                do {
                printf("Digite o ano do livro\n");
                scanf("%d", &ano);
                } while (ano < 0);

                do {
                printf("Digite 1 se esta disponivel  ou 0 se esta emprestado\n");
                scanf("%d", &disponivel);
                } while (disponivel<0 || disponivel>1);
                getchar();
                Livro* livro = gerarLivro(isbn,titulo,autor,ano,disponivel);
                raiz = inserirlivro(raiz, livro);
                printf("Livro inserido na arvore\n");




        }
        if(opc==2){

        }
        if(opc==3){
        printf("todas as isbns dos livros");
        exibir(raiz);
        }
        if(opc==4){

        }
    }while(opc!=5);
    return 0;
}
